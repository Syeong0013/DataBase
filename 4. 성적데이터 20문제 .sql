--1. 학생리스트 출력
-- 학생아이디, 학생이름,  학생주소,  학생학과
SELECT 
	B.STU_ID AS 학생아이디,
	B.STU_NAME AS 학생이름,
	A.LOCALS AS 학생주소,
	C.COMVAL || ' ' || C.COM_VAL AS 학생학과
FROM
(
		SELECT
			COM_ID,
			SYS_CONNECT_BY_PATH (COM_VAL,'   ') AS LOCALS
		FROM 
				(
					SELECT 
						* 
					FROM 
						COMMONS_TBL 
					WHERE 
						GRP_ID = 'GRP001'
				)
		START WITH 
			PARENT_ID = 'COM0000'
		CONNECT BY NOCYCLE PRIOR 
			COM_ID = PARENT_ID
)A, STUDENTS_TBL B,
(
	SELECT
		T2.COM_VAL AS COMVAL, T1.COM_VAL , T1.COM_ID
	FROM
		COMMONS_TBL T1,
		COMMONS_TBL T2
	WHERE
		T1.GRP_ID = 'GRP002'
		AND T1.GRP_ID = T2.GRP_ID
		AND T1.PARENT_ID = T2.COM_ID
		AND T1.COM_LVL = 2
)C
WHERE 
		     A.COM_ID = B.STU_ADDR
	AND C.COM_ID = B.STU_DEPT
ORDER BY B.STU_ID
;

--2. 교수리스트 출력
--교수아이디   교수이름   교수주소   소속학과
SELECT 
	B.PRO_ID AS 교수아이디,
	B.PRO_NAME AS 교수이름,
	A.LOCALS AS 교수주소,
	C.COMVAL || ' ' || C.COM_VAL AS 교수학과
FROM
(
		SELECT
			COM_ID,
			SYS_CONNECT_BY_PATH (COM_VAL,'   ') AS LOCALS
		FROM 
				(
					SELECT 
						* 
					FROM 
						COMMONS_TBL 
					WHERE 
						GRP_ID = 'GRP001'
				)
		START WITH 
			PARENT_ID = 'COM0000'
		CONNECT BY NOCYCLE PRIOR 
			COM_ID = PARENT_ID
)A, PROFESSORS_TBL B,
(
	SELECT
		T2.COM_VAL AS COMVAL, T1.COM_VAL , T1.COM_ID
	FROM
		COMMONS_TBL T1,
		COMMONS_TBL T2
	WHERE
		T1.GRP_ID = 'GRP002'
		AND T1.GRP_ID = T2.GRP_ID
		AND T1.PARENT_ID = T2.COM_ID
		AND T1.COM_LVL = 2
)C
WHERE 
		     A.COM_ID = B.PRO_ADDR
	AND C.COM_ID = B.PRO_DEPT
ORDER BY B.PRO_ID
;


--3. 과목리스트
-- 등록년도   등록학기   해당학과   과목    학점
SELECT
	A.DO_YEAR || '년 ' || A.SEMESTER || '학기' AS 등록학기, 
	B.COMVAL || ' '|| B.COM_VAL AS 소속학과,
	A.SUB_NAME AS 과목, 
	A. SUB_CREDIT AS 학점
FROM
	SUBJECTS_TBL A,
(
	SELECT
		T2.GRP_ID AS GRPID,
		T2.COM_ID AS COMID,
		T2.COM_VAL AS COMVAL,
		T3.GRP_ID,
		T3.COM_ID,
		T3.COM_VAL
	FROM
		COMMONS_TBL T1,
		COMMONS_TBL T2,
		COMMONS_TBL T3
	WHERE
			T1.GRP_ID = T2.GRP_ID
		AND T1.COM_ID = T2.PARENT_ID
		AND T2.GRP_ID = T3.GRP_ID
		AND T2.COM_ID = T3.PARENT_ID
		AND T1.GRP_ID = 'GRP002'
)B
WHERE 
		A.DEPT_GRP = B.GRP_ID
	AND A.DEPT_CODE = B.COM_ID
;

--4. 학 학과별 과목리스트
-- 학과아이디, 학과명,   해당과목아이디, 해당과목,  학점
-- 3번이랑 동일한 문제

--5. 학생별 신청과목 리스트
--학생아이디  학생이름  소속학과  신청과목아이디  신청과목  학점
SELECT
	T2.STU_ID AS 학생아이디, 
	T2.STU_NAME AS 학생이름, 
	T5.COM_VAL || ' ' || T1.COM_VAL AS 소속학과,
	T3.SUB_ID AS 신청과목아이디,
	T3.SUB_NAME AS 신청과목,
	T3.SUB_CREDIT AS 학점
FROM
	COMMONS_TBL T1,
	STUDENTS_TBL T2,  
	SUBJECTS_TBL T3,
	STUDENTS_TIME_TBL T4,
	COMMONS_TBL T5
WHERE
		T1.COM_ID = T2.STU_DEPT
	AND T2.STU_ID = T4.STU_ID
	AND T4.SUB_ID = T3.SUB_ID
	AND T5.COM_ID = T1.PARENT_ID
	AND T1.GRP_ID = 'GRP002'
	AND T5.GRP_ID = 'GRP002'
ORDER BY T2.STU_ID
;


--각 학생별 총 신청 학점
SELECT
	T2.STU_ID AS 학생아이디, 
	T2.STU_NAME AS 학생이름,
	T5.COM_VAL || ' ' || T1.COM_VAL AS 소속학과,
	SUM(NVL(T3.SUB_CREDIT,0)) AS 신청학점
FROM
	COMMONS_TBL T1,
	STUDENTS_TBL T2,  
	SUBJECTS_TBL T3,
	STUDENTS_TIME_TBL T4,
	COMMONS_TBL T5
WHERE
		T1.COM_ID = T2.STU_DEPT
	AND T2.STU_ID = T4.STU_ID(+)
	AND T4.SUB_ID = T3.SUB_ID(+)
	AND T5.COM_ID = T1.PARENT_ID
	AND T1.GRP_ID = 'GRP002'
	AND T5.GRP_ID = 'GRP002'
GROUP BY 
	T2.STU_ID, 
	T2.STU_NAME,
	T5.COM_VAL, 
	T1.COM_VAL
ORDER BY
	T2.STU_ID
;
	/* 수강신청을 하지 않은 학생 ( 4명 ) 
	STU062	홍길동62		선박해양공학과
	STU063	홍길동63		선박해양공학과
	STU071	홍길동71		선박해양공학과
	STU072	홍길동72		선박해양공학과
	*/
	
	
--6. 교수별 강의 리스트
-- 교수아이디    교수명    소속학과    강의과목아이디    과목명
SELECT 
	T1.PRO_ID AS 교수아이디, 
	T1.PRO_NAME AS 교수명,
	T2.COM_VAL AS 소속학과, 
	T3.SUB_ID AS 강의과목아이디, 
	T3.SUB_NAME AS 강의과목명
FROM 
	PROFESSORS_TBL T1, 
	COMMONS_TBL T2, 
	SUBJECTS_TBL T3
WHERE 
		T1.PRO_ID = T3.PRO_ID
	AND T1.PRO_DEPT_GRP = T2.GRP_ID
	AND T1.PRO_DEPT = T2.COM_ID
	AND T1.PRO_ID = T3.PRO_ID
ORDER BY 
	T1.PRO_ID, T3.SUB_ID
;

--7. 각 학과별 학생숫자
--학과명    학생수
SELECT 
	T1.COM_ID AS 학과아이디,
	T2.COM_VAL || ('   ') || T1.COM_VAL AS 학과명, 
	COUNT(T3.STU_ID) AS 학생수
FROM
	COMMONS_TBL T1,
	COMMONS_TBL T2,
	STUDENTS_TBL T3
WHERE 
		T1.PARENT_ID = T2.COM_ID
	AND T1.COM_ID = T3.STU_DEPT(+)
	AND T2.GRP_ID = T1.GRP_ID
	AND T1.GRP_ID = 'GRP002'
	AND T1.COM_LVL = 2
GROUP BY T1.COM_ID, T2.COM_VAL, T1.COM_VAL
ORDER BY T2.COM_VAL, T1.COM_VAL
;


--8. 각 학과별 교수숫자
--학과명    교수수
SELECT 
	T1.COM_ID AS 학과아이디,
	T2.COM_VAL || ' ' || T1.COM_VAL AS 학과명,
	COUNT(PRO_ID) AS 교수수
FROM 
	COMMONS_TBL T1,
	COMMONS_TBL T2,
	PROFESSORS_TBL T3
WHERE
		T1.PARENT_ID = T2.COM_ID
	AND T1.GRP_ID = 'GRP002'
	AND T2.GRP_ID = 'GRP002'
	AND T1.COM_ID = T3.PRO_DEPT(+)
	AND T1.COM_LVL=2
GROUP BY
	T1.COM_ID, T2.COM_VAL || ' ' || T1.COM_VAL
ORDER BY
	T1.COM_ID
;

--9. 각 학과별 학생숫자 , 소속교수숫자
--학과명    학생수,   교수수
SELECT
	A.COM_ID AS 학과ID,
	A.COMVAL || ('  ') ||A.COM_VAL AS 학과명,
	A.STUCNT AS 학생수,
	B.PROCNT AS 교수수
FROM
(
		SELECT 
			T1.COM_ID, T2.COM_VAL AS COMVAL, T1.COM_VAL, COUNT(T3.STU_ID) AS STUCNT
		FROM
			COMMONS_TBL T1,	
			COMMONS_TBL T2,
			STUDENTS_TBL T3
		WHERE
			T1.PARENT_ID = T2.COM_ID
			AND T1.COM_ID = T3.STU_DEPT(+)
			AND T1.GRP_ID = 'GRP002'
			AND T2.GRP_ID = 'GRP002'
			AND T1.COM_LVL = 2
		GROUP BY T1.COM_ID, T2.COM_VAL, T1.COM_VAL
	)A,
	(
		SELECT 
			T1.COM_ID, T1.COM_VAL, COUNT(T2.PRO_ID) AS PROCNT
		FROM
			COMMONS_TBL T1,
			PROFESSORS_TBL T2
		WHERE
				T1.COM_ID = T2.PRO_DEPT(+)
			AND T1.GRP_ID = 'GRP002'
			AND T1.COM_LVL = 2
		GROUP BY T1.COM_ID, T1.COM_VAL
	)B
WHERE 
		A.COM_ID = B.COM_ID
	AND A.COM_VAL = B.COM_VAL
ORDER BY 
	A.COM_ID
;

--10. 각 지역별 학생숫자 , 소속교수숫자,    >> 다른 곳에서 연습중 
--지역명    학생수,   교수수
SELECT
	C.LOCALS AS 지역명,
	NVL(A.STUCNT, 0) AS 학생수,
	NVL(B.PROCNT, 0) AS 교수수
FROM
(-- 지역 별 학생 수 구하는 인라인 쿼리 생성
	SELECT
		T1.COM_ID,
		T1.COM_VAL, 
		COUNT(T2.STU_ID) AS STUCNT
	FROM 
		COMMONS_TBL T1,
		STUDENTS_TBL T2	
	WHERE
			T1.GRP_ID = 'GRP001'
		AND T1.COM_ID = T2.STU_ADDR
	GROUP BY
		T1.COM_ID, 
		T1.COM_VAL
)A,
(-- 지역 별 교수 수 구하는 인라인 쿼리 생성
	SELECT
		T1.COM_ID,
		T1.COM_VAL, 
		COUNT(T2.PRO_ID) AS PROCNT
	FROM
		COMMONS_TBL T1,
		PROFESSORS_TBL T2
	WHERE
			T1.GRP_ID = 'GRP001'
		AND T1.COM_ID = T2.PRO_ADDR
	GROUP BY
		T1.COM_ID, 
		T1.COM_VAL
)B,
(--지역 모든 리스트
		SELECT
			COM_ID,
			SYS_CONNECT_BY_PATH (COM_VAL,'     ') AS LOCALS
		FROM 
				(
					SELECT 
						* 
					FROM 
						COMMONS_TBL 
					WHERE 
						GRP_ID = 'GRP001'
				)
		WHERE
					 COM_LVL > 2 
		START WITH 
			PARENT_ID = 'COM0000'
		CONNECT BY NOCYCLE PRIOR 
			COM_ID = PARENT_ID
)C
WHERE 
		C.COM_ID = B.COM_ID(+)
	AND C.COM_ID = A.COM_ID(+)
;

--11. 가장많은 학점을 듣고 있는 학생을 찾아주세요 --DENSE RANK() OVER() 
-- 여러명일수도 있어요
SELECT
	*
FROM 
(
	SELECT
		T2.STU_ID AS 학생아이디, 
		T2.STU_NAME AS 학생이름,
		T5.COM_VAL || ' ' || T1.COM_VAL AS 소속학과,
		SUM(NVL(T3.SUB_CREDIT,0)) AS 신청학점,
		DENSE_RANK() OVER(ORDER BY SUM(NVL(T3.SUB_CREDIT,0))DESC) AS RANKING
	FROM
		COMMONS_TBL T1,
		STUDENTS_TBL T2,  
		SUBJECTS_TBL T3,
		STUDENTS_TIME_TBL T4,
		COMMONS_TBL T5
	WHERE
			T1.COM_ID = T2.STU_DEPT
		AND T2.STU_ID = T4.STU_ID(+)
		AND T4.SUB_ID = T3.SUB_ID(+)
		AND T5.COM_ID = T1.PARENT_ID
		AND T1.GRP_ID = 'GRP002'
		AND T5.GRP_ID = 'GRP002'
	GROUP BY 
		T2.STU_ID, 
		T2.STU_NAME,
		T5.COM_VAL || ' ' || T1.COM_VAL
)
WHERE
	RANKING = 1
;

--12. 가장많은 강의 시간을 가지고 있는 교수를 찾아주세요 // 수강신청이 0인 데이터가 있음 
SELECT
	*
FROM
(
	SELECT 
		T1.PRO_ID, 
		T1.PRO_NAME AS 교수명, 
		NVL(SUM(T2.SUB_CREDIT),0) AS 강의시간,
		DENSE_RANK() OVER(ORDER BY NVL(SUM(T2.SUB_CREDIT),0) DESC) AS RANKING
	FROM
		PROFESSORS_TBL T1,
		(-- 수강신청이 최소 1개 들어온 강의 목록
		SELECT
			A1.SUB_ID, 
			A1.SUB_NAME, 
			A1.PRO_ID, 
			A1.SUB_CREDIT,
			COUNT(A2.STU_ID)
		FROM
			SUBJECTS_TBL A1,
			STUDENTS_TIME_TBL A2
		WHERE
			A1.SUB_ID = A2.SUB_ID -- (+) 붙이면 철학4 과목 출력 2학점 짜리 / 수강신청 0 / PRO036
		GROUP BY 
			A1.SUB_ID,
			A1.SUB_NAME, 
			A1.PRO_ID, 
			A1.SUB_CREDIT
		)T2
	WHERE 
		T1.PRO_ID = T2.PRO_ID(+) -- 강의를 하지 않는 교수도 출력
	GROUP BY T1.PRO_ID, T1.PRO_NAME
)
WHERE 
	RANKING = 1
ORDER BY 
	PRO_ID
;

--13. 2018년 2월1일 부터 ~ 2월 28일까지 각 날짜별로 수강신청 현황을 보여주세요
-- 학생 별 수강신청 현황
SELECT 
	 T1.REG_TIME, T2.STU_ID, T2.STU_NAME, T3.SUB_ID, T3.SUB_NAME
FROM
	STUDENTS_TIME_TBL T1,
	STUDENTS_TBL T2,
	SUBJECTS_TBL T3
WHERE 
	T1.REG_TIME > '180131'
	AND T1.REG_TIME < '180301'	
	AND T1.STU_ID = T2.STU_ID
	AND T1.SUB_ID = T3.SUB_ID
ORDER BY 
	T1.REG_TIME
;

-- 2월 1일부터 28일까지 수강신청 횟수, ++ 학생 수
SELECT
	A.DAYS AS 신청날짜,
	NVL(B.REGCNT,0) AS 신청횟수,
	NVL(C.STUCNT,0) AS 학생수
FROM
(
	SELECT
		TO_DATE(LEVEL + '180200','YYMMDD') AS DAYS
	FROM 
		DUAL
	CONNECT BY LEVEL <= TO_NUMBER(TO_CHAR(LAST_DAY(TO_DATE('180201','YYMMDD')), 'DD'))
)A,
(
	SELECT 
		 TO_DATE(T1.REG_TIME) AS REG_TIME,
		 COUNT(REG_TIME) AS REGCNT
	FROM
		STUDENTS_TIME_TBL T1,
		SUBJECTS_TBL T2
	WHERE 
			T1.REG_TIME > '180131'
		AND T1.REG_TIME < '180301'
		AND T1.SUB_ID = T2.SUB_ID
	GROUP BY T1.REG_TIME
)B,
(
	SELECT
		REG_TIME,
		COUNT(*) AS STUCNT
	FROM
		(
		SELECT
			REG_TIME, STU_ID, COUNT(*) 
		FROM
			STUDENTS_TIME_TBL
		GROUP BY REG_TIME, STU_ID
		)
	GROUP BY 
		REG_TIME
)C
WHERE
		A.DAYS = B.REG_TIME(+)
		AND A.DAYS = C.REG_TIME(+)
ORDER BY 
	A.DAYS;


--14. 가장 수강신청이 많은 날짜를 찾아주세요
SELECT
	*
FROM
(
	SELECT 
		 T1.REG_TIME AS 수강신청날짜,
		 COUNT(REG_TIME) AS 신청횟수,
		 DENSE_RANK() OVER(ORDER BY COUNT(REG_TIME) DESC) AS RANKING
	FROM
		STUDENTS_TIME_TBL T1,
		SUBJECTS_TBL T2
	WHERE 
		T1.SUB_ID = T2.SUB_ID
	GROUP BY T1.REG_TIME
)
WHERE
	RANKING = 1
;

--15. 가장 수강신청이 많은 과목 해당과목 교수님을 찾아주세요
SELECT
	A.RANKING, 
	B.PRO_ID AS 교수아이디, 
	B.PRO_NAME AS 교수명, 
	A.SUB_ID AS 과목아이디, 
	A.SUB_NAME AS 과목명,
	A.CNT AS 수강신청수
FROM
(
	SELECT 
		T2.SUB_ID, 
		T2.SUB_NAME,
		T2.PRO_ID,
		COUNT(T1.STU_ID) AS CNT,
		DENSE_RANK() OVER(ORDER BY COUNT(T1.STU_ID)DESC) AS RANKING
	FROM
		STUDENTS_TIME_TBL T1,
		SUBJECTS_TBL T2
	WHERE
			T1.SUB_ID(+) = T2.SUB_ID
	GROUP BY 
		T2.SUB_ID, T2.SUB_NAME, T2.PRO_ID
)A, PROFESSORS_TBL B
WHERE
	A.PRO_ID = B.PRO_ID
	AND A.RANKING = 1
;
/*
1		PRO013		전우치13		SUB0085		원자력 2
*/

--16. 학생이 한명도 없는 학과의 교수명단 리스트를 보여주세요
SELECT 
	A.COM_ID AS 학과아이디,
	A.COM_VAL AS 학과명,
	A.CNT AS 학생수,
	B.PRO_NAME AS 교수명,
	B.PRO_DEPT AS 소속학과
FROM
		(-- 학생이 한 명도 없는 학과의 리스트 
		SELECT * FROM 
				( -- 모든 학과 학생 수 리스트 
				SELECT
					T2.COM_ID, 
					T2.COM_VAL,
					COUNT(STU_ID) AS CNT
				FROM
					STUDENTS_TBL T1,
					COMMONS_TBL T2
				WHERE
							T2.GRP_ID = 'GRP002'
					AND T1.STU_DEPT_GRP(+) = T2.GRP_ID
					AND T1.STU_DEPT(+) = T2.COM_ID
					AND T2.COM_LVL = 2
				GROUP BY 
					T2.COM_ID, 
					T2.COM_VAL
				)
		WHERE CNT = 0
		)A, PROFESSORS_TBL B
WHERE 
	 A.COM_ID = B.PRO_DEPT
ORDER BY
	A.COM_ID
;


--17. 각 학과별 학생들의 시험성적 평균과 합계를 보여주세요
-- 1) 중간고사 2) 기말고사 3) 중간과 기말 함께
-- 1) 중간고사 
SELECT
	COM_ID AS 학과아이디,
	COM_VAL AS 학과명, 
	SUM(SUMSC) AS 중간고사점수총합,
	ROUND(SUM(AVGSC) / (COUNT(COM_ID)),2) AS 중간고사점수평균
FROM
		(	-- 학생 별 시험 합 , 평균 
		SELECT 
			T3.COM_ID, T3.COM_VAL, T1.STU_ID, T1.STU_NAME,
			SUM( NVL(T2.SCORE, 0)) AS SUMSC,
			ROUND(SUM( NVL(T2.SCORE, 0)) / COUNT(T3.COM_ID) ,2) AS AVGSC
		FROM
			STUDENTS_TBL T1,
			SCORES_TBL T2,
			COMMONS_TBL T3
		WHERE
			 T1.STU_ID = T2.STU_ID(+)
			 AND T1.STU_DEPT_GRP(+) = T3.GRP_ID
			 AND T1.STU_DEPT(+) = T3.COM_ID
			 AND (T2.GUBUN = 1 OR T2.GUBUN IS NULL)
			 AND T3.GRP_ID = 'GRP002' AND T3.COM_LVL = 2
		GROUP BY 
			T3.COM_ID, T3.COM_VAL, T1.STU_ID, T1.STU_NAME
)
GROUP BY COM_ID, COM_VAL
;
/*
COM0020	경영학과	STU001	홍길동01	471.5	78.58
COM0020	경영학과	STU006	홍길동06	362.81	72.56
COM0020	경영학과	STU007	홍길동07	599.5	74.94

COM0020	경영학과	1433.81	75.36
*/
--2) 기말고사
SELECT
	COM_ID AS 학과아이디, 
	COM_VAL AS 학과명, 
	SUM(SUMSC) AS 기말고사점수총합,
	ROUND(SUM(AVGSC) / (COUNT(COM_ID)),2) AS 기말고사점수평균
FROM
		(	-- 학생 별 시험 합 , 평균 
		SELECT 
			T3.COM_ID, T3.COM_VAL, T1.STU_ID, T1.STU_NAME,
			SUM( NVL(T2.SCORE, 0)) AS SUMSC,
			ROUND(SUM( NVL(T2.SCORE, 0)) / COUNT(T3.COM_ID) ,2) AS AVGSC
		FROM
			STUDENTS_TBL T1,
			SCORES_TBL T2,
			COMMONS_TBL T3
		WHERE
			 T1.STU_ID = T2.STU_ID(+)
			 AND T1.STU_DEPT_GRP(+) = T3.GRP_ID
			 AND T1.STU_DEPT(+) = T3.COM_ID
			 AND (T2.GUBUN = 2 OR T2.GUBUN IS NULL)
			 AND T3.GRP_ID = 'GRP002' AND T3.COM_LVL = 2
		GROUP BY 
			T3.COM_ID, T3.COM_VAL, T1.STU_ID, T1.STU_NAME
		)
GROUP BY COM_ID, COM_VAL
ORDER BY COM_ID
;
/*
COM0020	경영학과	STU001	홍길동01	475.88	79.31
COM0020	경영학과	STU006	홍길동06	371.2	74.24
COM0020	경영학과	STU007	홍길동07	622.29	77.79

COM0020	경영학과	1469.37	77.11
*/

--3) 전부 다 
SELECT
	COM_ID AS 학과아이디, 
	COM_VAL AS 학과명, 
	SUM(SUMSC) AS 한학기점수합,
	ROUND(SUM(AVGSC) / (COUNT(COM_ID)),2) AS 한학기점수평균
FROM
		(	-- 학생 별 시험 합 , 평균 
		SELECT 
			T3.COM_ID, T3.COM_VAL, T1.STU_ID, T1.STU_NAME,
			SUM( NVL(T2.SCORE, 0)) AS SUMSC,
			ROUND(SUM( NVL(T2.SCORE, 0)) / COUNT(T3.COM_ID) ,2) AS AVGSC
		FROM
			STUDENTS_TBL T1,
			SCORES_TBL T2,
			COMMONS_TBL T3
		WHERE
			 T1.STU_ID = T2.STU_ID(+)
			 AND T1.STU_DEPT_GRP(+) = T3.GRP_ID
			 AND T1.STU_DEPT(+) = T3.COM_ID
			 AND T3.GRP_ID = 'GRP002' AND T3.COM_LVL = 2
		GROUP BY 
			T3.COM_ID, T3.COM_VAL, T1.STU_ID, T1.STU_NAME
		)
GROUP BY COM_ID, COM_VAL
ORDER BY COM_ID
;

/*
--중간
COM0020	경영학과	STU001	홍길동01	471.5	78.58
COM0020	경영학과	STU006	홍길동06	362.81	72.56
COM0020	경영학과	STU007	홍길동07	599.5	74.94

COM0020	경영학과	1433.81	75.36
--기말
COM0020	경영학과	STU001	홍길동01	475.88	79.31
COM0020	경영학과	STU006	홍길동06	371.2	74.24
COM0020	경영학과	STU007	홍길동07	622.29	77.79

COM0020	경영학과	1469.37	77.11

--> COM0020	경영학과	2903.18	76.24
*/

--18. 전체 학생 성적리스트 
     -- 소속학과  학생명  평균   총점  신청학점  순위 순으로 보여주세요
SELECT 
	T3.COM_ID AS 학과아이디,
	T4.COM_VAL || ' ' || T3.COM_VAL AS 학과명,
	T2.STU_ID AS 학생아이디,
	T2.STU_NAME AS 학생명,
	ROUND(NVL(SUM(T1.SCORE)/COUNT(T1.STU_ID),0),2) AS 평균, 
	NVL(SUM(T1.SCORE), 0) AS 신청학점,
	RANK() OVER(ORDER BY ROUND(SUM(T1.SCORE)/COUNT(T1.STU_ID),2) DESC NULLS LAST) AS RANKING
FROM
	SCORES_TBL T1,
	STUDENTS_TBL T2,
	COMMONS_TBL T3,
	COMMONS_TBL T4
WHERE
	T1.STU_ID(+) = T2.STU_ID 
	AND T3.GRP_ID = 'GRP002'
	AND T3.GRP_ID = T4.GRP_ID
	AND T3.GRP_ID = T2.STU_DEPT_GRP
	AND T3.COM_ID = T2.STU_DEPT
	AND T3.COM_LVL = 2
	AND T3.PARENT_ID = T4.COM_ID
GROUP BY
	T3.COM_ID,
	T4.COM_VAL || ' ' || T3.COM_VAL, 
	T2.STU_ID, 
	T2.STU_NAME
ORDER BY 
	RANKING, 
	T2.STU_ID
;

--19. 출제한 교수 별 시험결과
    -- 소속학과  교수명  평균    총점 
SELECT 
	T2.SUB_ID AS 과목아이디, 
	T2.SUB_NAME AS 과목명,
	T3.PRO_NAME AS 담당교수명,
	NVL(SUM(T1.SCORE),0) AS 시험평균,
	ROUND(NVL(SUM(T1.SCORE),0) / COUNT(T2.SUB_ID),2) AS 시험총점
FROM
	SCORES_TBL T1,
	SUBJECTS_TBL T2,
	PROFESSORS_TBL T3
WHERE
			T1.SUB_ID(+) = T2.SUB_ID
	AND T2.PRO_ID = T3.PRO_ID
GROUP BY 
	T2.SUB_ID, 
	T2.SUB_NAME,
	T3.PRO_NAME
ORDER BY 
	T2.SUB_ID
;
    /*
STU003	SUB0001	2018	1	1	89.47	18/04/20	SUB0001
STU003	SUB0001	2018	1	2	64.04	18/06/25	SUB0001
STU054	SUB0001	2018	1	1	81.25	18/04/20	SUB0001
STU054	SUB0001	2018	1	2	81.24	18/06/25	SUB0001
STU017	SUB0001	2018	1	1	77.89	18/04/20	SUB0001
STU046	SUB0001	2018	1	2	94.12	18/06/25	SUB0001
STU021	SUB0001	2018	1	1	77.14	18/04/20	SUB0001
STU021	SUB0001	2018	1	2	90	18/02/02	SUB0001
STU034	SUB0001	2018	1	1	69	18/04/20	SUB0001
STU034	SUB0001	2018	1	2	89	18/06/25	SUB0001
STU046	SUB0001	2018	1	1	78.11	18/04/20	SUB0001
STU017	SUB0001	2018	1	2	90.25	18/06/25	SUB0001
	과목 별 합 981.51 평균 81.79
	*/
	
	
--20. 다음과 같은 룰로 학생들의 총 학점을 구해주세요
/*
    90점 이상                  :  A     -  4.5
    80점 이상 90점미만       :  B     -  3.5
    70점 이상 80점미만       :  C     -  2.5
    60점 이상 70점미만       :  D     -  1.5
    60점 미만                  :  F     -  1.0
    
    소속학과   학생명    총신청학점      총점    평균     학점     순위
	
시험 안친 한생 4명
*/
SELECT
	소속학과,
	학생명,
	총점,
	AVGSC AS 평균,
	CASE  WHEN AVGSC >= 90 THEN 'A'
				WHEN AVGSC >= 80 AND AVGSC < 90 THEN 'B'
				WHEN AVGSC >= 70 AND AVGSC < 80  THEN 'C'
				WHEN AVGSC >= 60 AND AVGSC < 70  THEN 'D'
				WHEN AVGSC < 60 THEN 'F'
	END 학점,
	RANKING
FROM
(
SELECT
	T4.COM_VAL || ' ' || T3.COM_VAL AS 소속학과,
	T2.STU_NAME AS 학생명,
	NVL(SUM(T1.SCORE), 0) AS 총점,
	ROUND(NVL(SUM(T1.SCORE), 0) / COUNT(T2.STU_ID), 2) AS AVGSC,
	RANK() OVER(ORDER BY ROUND(NVL(SUM(T1.SCORE), 0) / COUNT(T2.STU_ID), 2)DESC NULLS LAST) AS RANKING
FROM
	SCORES_TBL T1,
	STUDENTS_TBL T2,
	COMMONS_TBL T3,
	COMMONS_TBL T4
WHERE
			 T1.STU_ID(+) = T2.STU_ID
	AND T2.STU_DEPT_GRP = T3.GRP_ID
	AND T3.GRP_ID = T4.GRP_ID
	AND T3.GRP_ID = 'GRP002'
	AND T2.STU_DEPT = T3.COM_ID
	AND T3.PARENT_ID = T4.COM_ID
GROUP BY 
	T4.COM_VAL || ' ' || T3.COM_VAL,
	T2.STU_NAME
)
;

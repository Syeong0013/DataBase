create or replace PACKAGE BODY PKG_DRIVER AS

	-- 새로운 대리운전 기사를 등록하는 프로시저
	PROCEDURE PROC_INS_DRIVER(
		 IN_DR_NAME		IN		VARCHAR2
		,IN_DR_TEL		IN		VARCHAR2
		,IN_DR_GENDER	IN		VARCHAR2
	)AS
	
		V_NEW_ID		CHAR(5);
		
	BEGIN
	
		SELECT 'DR' || TO_CHAR(NVL(TO_NUMBER(SUBSTR(MAX(DR_ID), 3, 3)), 0) +1, 'FM000')
		INTO V_NEW_ID
		FROM DRIVERS_TBL
		;
		
		INSERT INTO DRIVERS_TBL(DR_ID, DR_NAME, DR_TEL, DR_GENDER)
		VALUES(V_NEW_ID, IN_DR_NAME, IN_DR_TEL, IN_DR_GENDER)
		;
		
	END PROC_INS_DRIVER;
	
	
	
	
	-- 현재 등록되어있는 정보로 포인트 계산하는 프로시저 
	 PROCEDURE PROC_UP_POINT
	 AS
	 BEGIN
	 
		FOR I IN(
			SELECT R_TEL, SUM(NEW_POINT) AS MEM_POINT
			FROM
			(
			-- 건당 포인트 적립
			SELECT T3.R_TEL, T3.MEM_POINT, ROUND(R_PAY * 0.03) AS NEW_POINT
			FROM RESERVATION_TBL T1, FINISH_DRIVE_TBL T2, DR_MEMBER_TBL T3
			WHERE T1.R_ID = T2.R_ID
				AND T1.R_TEL = T3.R_TEL
				AND T2.F_GUBUN = 1
			)
			GROUP BY R_TEL
			)
		LOOP
			UPDATE DR_MEMBER_TBL
			SET MEM_POINT = I.MEM_POINT
			WHERE R_TEL = I.R_TEL;
		END LOOP;
	 
	 END PROC_UP_POINT;
	 
	 
	 
	 -- 이용자가 대리운전을 요청하는 전화를 하면
     -- 입력하는 직원은 해당 프로시저에 이용자 연락처만 입력하고 저장하면
     -- 새로운 이용자이면 DR_MEMBER_TBL에 새롭게 추가하고
     -- 이미 등록된 이용자이면 사용자 예외처리를 활용하여 에러처리를 해 주세요
	 PROCEDURE PROC_INS_MEMBER(
		 IN_MEM_TEL		IN		VARCHAR2
		,O_ERRSQL		OUT		VARCHAR2
		,O_ERRMSG		OUT		VARCHAR2
	 )
	 AS
	 
		V_CHK_TEL			NUMBER(1);
		
		MEM_TEL_EXCEPTION	EXCEPTION;
		
	 BEGIN
		
		SELECT COUNT(R_TEL)
		INTO V_CHK_TEL
		FROM DR_MEMBER_TBL
		WHERE R_TEL = IN_MEM_TEL
		;
		
		IF V_CHK_TEL = 0 THEN
			INSERT INTO DR_MEMBER_TBL(R_TEL, MEM_POINT)
			VALUES(IN_MEM_TEL, 0);
			
		ELSE -- V_CHK_TEL = 1 THEN
			RAISE MEM_TEL_EXCEPTION;
			
		END IF;
		
		EXCEPTION
		WHEN MEM_TEL_EXCEPTION THEN
			O_ERRSQL := 'ERROR-001';
			O_ERRMSG := '이미 존재하는 이용자입니다.';
			
		WHEN OTHERS THEN
			O_ERRSQL := SQLCODE;
			O_ERRMSG := SQLERRM;
		
	 END PROC_INS_MEMBER;
	 
	 
	-- 각 요일별로 대리운전 총 매출액을 계산해서 보여주는 프로시저
	PROCEDURE PROC_SEL_PRICE(
		O_CURSOR		OUT		SYS_REFCURSOR
	)
	AS
	BEGIN
	
	  OPEN O_CURSOR FOR
	  SELECT
		A.DATES, NVL(B.TLTPRICE, 0) AS TLTPRICE
	  FROM
	  (
		  SELECT 
		 	 TO_CHAR(TO_DATE(LEVEL+ 191005), 'DAY') AS DATES
			,TO_CHAR(TO_DATE(LEVEL+ 191005), 'D') AS DAT
		  FROM DUAL
		  CONNECT BY LEVEL <8
	  )A,
	  (
		  SELECT 
			 TO_CHAR(F_DATE, 'DAY') AS DATES
			,TO_CHAR(NVL(SUM(T1.R_PAY), 0), 'FM999,999') AS TLTPRICE
		  FROM RESERVATION_TBL T1, FINISH_DRIVE_TBL T2
		  WHERE T1.R_ID = T2.R_ID
			AND T2.F_GUBUN = 1
		  GROUP BY TO_CHAR(F_DATE, 'DAY')
	  )B
	  WHERE A.DATES = B.DATES(+)
	  ORDER BY A.DAT
	  ;
	
	END PROC_SEL_PRICE;
	  	 
	PROCEDURE PROC_SEL_TLTPRICE(
		O_CURSOR		OUT		SYS_REFCURSOR
	)
	AS
	BEGIN
	
		OPEN O_CURSOR FOR
		SELECT 
			 A.DRDATE
			,NVL(B.COMPANY, 0) AS COMPANY
			,NVL(B.DRIVER, 0) AS DRIVER
		FROM
		(
		SELECT TO_CHAR(TO_DATE(LEVEL + 20180501,'YYYY-MM-DD'), 'YYYY-MM-DD') AS DRDATE
		FROM DUAL
		CONNECT BY LEVEL < 5
		)A,
		(
		SELECT
			 TO_CHAR(T2.F_DATE, 'YYYY-MM-DD') AS DATES
			,TO_CHAR(SUM(CASE WHEN T1.R_PAY >= 20000 THEN T1.R_PAY * 0.8
										  ELSE T1.R_PAY * 0.9
				 END), 'FM999,999') AS DRIVER
			,TO_CHAR(SUM(CASE WHEN T1.R_PAY >= 20000 THEN T1.R_PAY * 0.2
										 ELSE T1.R_PAY * 0.1
				 END), 'FM999,999') AS COMPANY
		FROM RESERVATION_TBL T1, FINISH_DRIVE_TBL T2
		WHERE T1.R_ID = T2.R_ID
			AND T2.F_GUBUN = 1
		GROUP BY TO_CHAR(T2.F_DATE, 'YYYY-MM-DD')
		)B
		WHERE A.DRDATE = B.DATES(+)
		ORDER BY A.DRDATE
		;
	
	END PROC_SEL_TLTPRICE;
	 
	
	
END PKG_DRIVER;
